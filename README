# status

work in progress.  there is some basic, incomplete, insecure (!)
code to make a connection and execute a command.


# about

this package contains a ssh client & the the library that the client
uses.  an ssh server is not plannend.  the goals is to let plan 9
& inferno users use resources from another (unix) machine:  interactive
shell, file server, network.


# todo

- security problem:  i don't know how big (number of bits) the dh
  client side secret should be, and whether we should verify if it's
  correct/secure.

- complete cipher,mac,etc negotiation.  i'm now doing a simple match
  (client wins), but there are a few more restrictions.
- check that dh param from server is valid
- rekeying
- enforce minimum packet length
- zero out sensitive data after use.  can we do that with ipint too?
- do something channel windowing
- make api easier to use.  perhaps parse connection-level packets
  into an adt.  make the packet parsing code simpler to use too?
- make padding random length?  make padding for packet containing password larger than minimum.
- other ciphers:  3dec-cbc, blowfish-cbc (these are supported by inferno)
- sftp, complete protocol
- do public/private key authentication
- ctr encryption modes in rfc4344
- fix ssh-rsa host key support
- do newer diffie-hellman key exchange.  without fixed primes/generator.
  precomputations may make original ssh2 rfc's scheme insecure in the
  future, according to newer rfc.
- think about sshnet
- compression.  it's hard in inferno, because we have to flush the
  buffers for each packet (but keep compression state).  inferno's
  deflate filter doesn't support that.

# docs

see doc/rfc.txt for the relevant rfc's and some excerpts from it.
