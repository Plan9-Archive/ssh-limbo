# status

work in progress.  there is some basic, incomplete, insecure (!)
code to make a connection and execute a command.


# about

this package contains a ssh client & the the library that the client
uses.  an ssh server is not plannend.  the goals is to let plan 9
& inferno users use resources from another (unix) machine:  interactive
shell, file server, network.


# todo

- security problem:  i don't know how big (number of bits) the dh
  client side secret should be, and whether we should verify if it's
  correct/secure.

- consistently send pack disconnect on any error.
- channel windows for ssh.b
- rekeying
- sftp, complete protocol
- enforce minimum packet length
- do hostkey fingerprint validation
- make it faster.  the expmod() calls for the dh exchange take up seconds.  perhaps i use too many bits?
- let factotum do the dss signing (and rsa too, once that works).
- write simple tool to export ssh-dss public key for use in openssh's authorized_keys.  the format seems to be:
	"ssh-dss" base64-of-ssh-encoding-of-public-key(including the string ssh-dss) "user@host"
- complete cipher,mac,etc negotiation.  i'm now doing a simple match
  (client wins), but there are a few more restrictions.  kex should also be negotiated.
- do auth method negotiation (in factotum)?  perhaps command-line option
- check that dh param from server is valid/sane
- zero out sensitive data after use.  can we do that with ipint too?
- make api easier to use.  perhaps parse connection-level packets
  into an adt.  make the packet parsing code simpler to use too?
- do auth keyboard-interactive ?  would that fit with factotum?
- other ciphers:  3dec-cbc, blowfish-cbc
- make padding random length?  and for interactive ssh, do some random sleep before sending?
- think about sshnet
- manual pages
- do rfc4419 "diffie-hellman-group-exchange-sha256".  inferno first needs sha256 for that.
- compression.  it's hard in inferno, because we have to flush the
  buffers for each packet (but keep compression state).  inferno's
  deflate filter doesn't support that.
- crypto:  cast, test/fix blowfish, "sha-2" (sha256, sha384, sha512), ripemd160
- test IDEA
- test against other sshd's than openssh (e.g. dropbear, lsh, more?)

# docs

see doc/rfc.txt for the relevant rfc's and some excerpts from it.
